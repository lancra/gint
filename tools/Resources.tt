<#@ template hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ assembly name="Microsoft.VisualStudio.Interop" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.Design" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<#
    var model = LoadResources();
    var namespaceHint = (string)System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint");
#>
// <auto-generated />

using System.Resources;

#nullable enable

namespace <#= namespaceHint #>
{
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    <#= model.AccessModifier #> static class <#= model.Class #>
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("<#= model.ResourceName #>", typeof(<#= model.Class #>).Assembly);
<#
    foreach (var resource in model.Resources)
    {
        if (!resource.ForLogging)
        {
#>

        /// <summary>
<#
        foreach (var line in Lines(resource.Value))
        {
#>
        /// <#= Xml(line) #>
<#
        }
#>
        /// </summary>
<#
            if (resource.Obsolete)
            {
#>
        [Obsolete]
<#
            }

            if (resource.Parameters.Any())
            {
#>
        public static string <#= resource.Name #>(<#= List("object? ", resource.Parameters.Select(e => e.ParamString)) #>)
            => string.Format(
                GetString("<#= resource.Name #>", <#= List(resource.Parameters.Select(e => e.NameOfString)) #>),
                <#= List(resource.Parameters.Select(e => e.ParamString)) #>);
<#
            }
            else
            {
#>
        public static string <#= resource.Name #>
            => GetString("<#= resource.Name #>");
<#
            }
        }
    }
#>

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name)!;
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace($"{{{formatterNames[i]}}}", $"{{{i}}}");
            }

            return value;
        }
    }
}

<#+
    ResourceFile LoadResources()
    {
        var result = new ResourceFile();

        if (Session.ContainsKey("AccessModifier"))
        {
            result.AccessModifier = (string)Session["AccessModifier"];
        };

        var resourceFile = (string)Session["ResourceFile"];
        if (!Path.IsPathRooted(resourceFile))
        {
            resourceFile = Host.ResolvePath(resourceFile);
        }

        var resourceNamespace = (string)Session["ResourceNamespace"];

        result.Class = Path.GetFileNameWithoutExtension(resourceFile);

        result.DiagnosticsClass = result.Class.Replace("Strings", "Resources");

        result.ResourceName = $"{resourceNamespace}.{result.Class}";

        List<ResXDataNode> sortedResources;
        using (var reader = new ResXResourceReader(resourceFile))
        {
            reader.UseResXDataNodes = true;
            sortedResources = reader.Cast<DictionaryEntry>()
                .OrderBy(entry => entry.Key)
                .Select(entry => (ResXDataNode)entry.Value)
                .ToList();

            result.Resources = sortedResources
                .Select(r => new Resource(r))
                .ToList();
        }

        using (var writer = new ResXResourceWriter(resourceFile))
        {
            foreach (var node in sortedResources)
            {
                writer.AddResource(node);
            }

            writer.Generate();
        }

        return result;
    }

    IEnumerable<string> Lines(string value)
        => value.Split(new[] { Environment.NewLine }, StringSplitOptions.None);

    string Xml(string value)
        => value.Replace("<", "&lt;").Replace(">", "&gt;");

    string List(IEnumerable<string> items)
        => List(null, items);

    string List(string prefix, IEnumerable<string> items, string suffix = null)
        => string.Join(", ", items.Select(i => prefix + i + suffix));

    class ResourceFile
    {
        public string AccessModifier { get; set; } = "public";
        public string Class { get; set; }
        public string DiagnosticsClass { get; set; }
        public string ResourceName { get; set; }
        public IEnumerable<Resource> Resources { get; set; }
    }

    class Resource
    {
        public Resource(ResXDataNode node)
        {
            Name = node.Name;
            Value = (string)node.GetValue((ITypeResolutionService)null);
            var parameters = Regex.Matches(Value, @"\{(\w+)\}")
                .Cast<Match>()
                .Select(m => m.Groups[1].Value)
                .Distinct()
                .Select(n => ("nameof(" + n + ")", n))
                .ToList();

            foreach (var parameter in parameters.ToList())
            {
                var rawString = parameter.Item2;
                var underscoreIndex = rawString.IndexOf('_');
                if (underscoreIndex > 0)
                {
                    var newIndex = int.Parse(rawString.Substring(0, underscoreIndex));
                    parameters[newIndex] = ("\"" + rawString + "\"", rawString.Substring(underscoreIndex + 1));
                }
            }

            Parameters = parameters;

            var eventInfo = node.Comment.Split(' ');
            var argumentsRead = 0;
            if (eventInfo.FirstOrDefault() == "Obsolete")
            {
                Obsolete = true;
                argumentsRead++;
            }

            Level = eventInfo.Skip(argumentsRead++).FirstOrDefault() ?? "BadLevel";
            EventId = eventInfo.Skip(argumentsRead++).FirstOrDefault() ?? "BadEventId";
            Types = eventInfo.Skip(argumentsRead++).ToList();
        }

        public string Name { get; }
        public string Value { get; }
        public string EventId { get; }
        public string Level { get; }
        public bool Obsolete { get; }
        public bool ForLogging => Name.StartsWith("Log");
        public IEnumerable<(string NameOfString, string ParamString)> Parameters { get; }
        public IEnumerable<string> Types { get; }
    }
#>
